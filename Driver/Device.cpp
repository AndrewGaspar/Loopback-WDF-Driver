#include "Device.h"
#include "Device.tmh"

#include "File.h"
#include "Io.h"
#include "Pnp.h"
#include "PowerPolicy.h"

NTSTATUS
LoopbackEvtDeviceAdd(
    _In_ WDFDRIVER Driver,
    _In_ PWDFDEVICE_INIT DeviceInit)
{
    UNREFERENCED_PARAMETER(Driver);

    TraceEntry();

    NTSTATUS status = STATUS_SUCCESS;

    WDF_OBJECT_ATTRIBUTES attributes;
    WDFDEVICE device;
    PLOOPBACK_DEVICE_CONTEXT deviceContext;

    //
    // Configure the device attributes so that a context is allocated
    //
    WDF_OBJECT_ATTRIBUTES_INIT_CONTEXT_TYPE(&attributes, LOOPBACK_DEVICE_CONTEXT);

    //
    // Set callbacks for events device is interested in - in our case,
    // we want to respond to PnP power change events and file object
    // management requests.
    //
    LoopbackDeviceInitSetPnpPowerCallbacks(DeviceInit);
    LoopbackDeviceInitSetFileObjectCallbacks(DeviceInit);

    // Instantiate the WDFDEVICE object
    status = WdfDeviceCreate(&DeviceInit, &attributes, &device);
    if (!NT_SUCCESS(status))
    {
        TraceError("%!FUNC! - WdfDeviceCreate failed with error %!STATUS!", status);
        goto Cleanup;
    }

    //
    // Get the device context and initialize it. GetDeviceContext is an
    // inline function generated by WDF_DECLARE_CONTEXT_TYPE_WITH_NAME.
    // This function will do the type checking and return
    // the device context. If you pass a wrong object  handle
    // it will return NULL and assert if run under framework verifier mode.
    //
    deviceContext = GetDeviceContext(device);
    deviceContext->MaxLengthInBytesForRWTransfers = 128;
    deviceContext->OpenFiles = 0;

    //
    // Create a device interface so that application can find and talk
    // to us.
    //
    status = WdfDeviceCreateDeviceInterface(device,
        &GUID_DEVINTERFACE_LOOPBACK,
        NULL); // Reference string
    if (!NT_SUCCESS(status)) {
        TraceError("%!FUNC! - WdfDeviceCreateDeviceInterface failed with error: %!STATUS!", status);
        goto Cleanup;
    }

    status = LoopbackDeviceCreateIoQueue(device);
    if (!NT_SUCCESS(status)) {
        TraceError("%!FUNC! - WdfIoQueueCreate failed with error: %!STATUS!", status);
        goto Cleanup;
    }

    status = LoopbackDeviceSetPowerPolicy(device);
    if (!NT_SUCCESS(status)) {
        TraceError("%!FUNC! - WdfDeviceAssignS0IdleSettings failed with error: %!STATUS!", status);
        goto Cleanup;
    }

    status = STATUS_SUCCESS;

Cleanup:

    TraceStatusAndReturn(status);
}
